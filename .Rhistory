library(SNPfiltR)
#read in vcf as vcfR
vcfR <- read.vcfR("~/Desktop/grosbeaks/m3.vcf")
library(vcfR)
#read in vcf as vcfR
vcfR <- read.vcfR("~/Desktop/grosbeaks/m3.vcf")
#generate popmap file. Two column popmap with the same format as stacks, and the columns must be named 'id' and 'pop'
popmap<-data.frame(id=colnames(vcfR@gt)[2:length(colnames(vcfR@gt))],pop=substr(colnames(vcfR@gt)[2:length(colnames(vcfR@gt))], 3,11))
View(popmap)
#generate popmap file. Two column popmap with the same format as stacks, and the columns must be named 'id' and 'pop'
popmap<-data.frame(id=colnames(vcfR@gt)[2:length(colnames(vcfR@gt))],pop=substr(colnames(vcfR@gt)[2:length(colnames(vcfR@gt))], 3,8))
View(popmap)
#hard filter to minimum depth of 5, and minimum genotype quality of 30
vcfR<-hard.filter.vcf(vcfR=vcfR, depth = 5, gq = 30)
#hard filter to minimum depth of 5, and minimum genotype quality of 30
vcfR<-hard_filter(vcfR=vcfR, depth = 5, gq = 30)
#execute allele balance filter
vcfR<-filter.allele.balance(vcfR)
#execute allele balance filter
vcfR<-filter_allele_balance(vcfR)
#visualize and pick appropriate max depth cutoff
max_depth(vcfR)
#filter vcf by the max depth cutoff you chose
vcfR<-max_depth(vcfR, maxdepth = 100)
#check vcfR to see how many SNPs we have left
vcfR
#run function to visualize samples
missing.by.sample(vcfR=vcfR, popmap = popmap)
#run function to visualize samples
missing_by_sample(vcfR=vcfR, popmap = popmap)
dev.off()
#run function to visualize samples
missing_by_sample(vcfR=vcfR, popmap = popmap)
#set missing data cutoff for individual samples
vcfR.95<-missing_by_sample(vcfR=vcfR, cutoff = .95)
popmap.95<-popmap[popmap$id %in% colnames(vcfR.95@gt),]
#visualize missing data by SNP and the effect of various cutoffs on the missingness of each sample
missing_by_snp(vcfR.95)
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
assess_clustering(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9, .95))
#remove invariant sites generated throughout the filtering process
vcfR.95<-min_mac(vcfR = vcfR.95, min.mac = 1)
#visualize missing data by SNP and the effect of various cutoffs on the missingness of each sample
missing_by_snp(vcfR.95)
#visualize missing data by SNP and the effect of various cutoffs on the missingness of each sample
miss<-missing_by_snp(vcfR.95)
View(miss)
#rerun missing by sample to figure out which samples are problematic even at high completeness cutoffs
miss<-missing_by_sample(vcfR=vcfR, popmap = popmap)
View(miss)
miss.9<-miss[miss$filt == .9]
miss.9<-miss[miss$filt == .9,]
View(miss.9)
hist(miss.9$snps.retained)
hist(miss.9$snps.retained, xlim=c(1000,1500))
hist(miss.9$snps.retained, breaks=30)
hist(miss.9$snps.retained, breaks=50)
hist(miss.9$snps.retained, breaks=50)
order(miss.9, miss.9$snps.retained)
order(miss.9$snps.retained)
miss.9[order(miss.9$snps.retained),]
vcfR.95
vcfR.95 <- vcfR.95[,colnames(vcfR@gt) != "P_melanocephalus_44674" &
colnames(vcfR@gt) != "P_melanocephalus_44842" &
colnames(vcfR@gt) != "P_melanocephalus_39985" &
colnames(vcfR@gt) != "P_melanocephalus_44844"]
vcfR.95
colnames(vcfR@gt) != "P_melanocephalus_44674" &
colnames(vcfR@gt) != "P_melanocephalus_44842" &
colnames(vcfR@gt) != "P_melanocephalus_39985" &
colnames(vcfR@gt) != "P_melanocephalus_44844"
colnames(vcfR.95@gt) != "P_melanocephalus_44674" &
colnames(vcfR.95@gt) != "P_melanocephalus_44842" &
colnames(vcfR.95@gt) != "P_melanocephalus_39985" &
colnames(vcfR.95@gt) != "P_melanocephalus_44844"
vcfR.95 <- vcfR.95[,colnames(vcfR.95@gt) != "P_melanocephalus_44674" &
colnames(vcfR.95@gt) != "P_melanocephalus_44842" &
colnames(vcfR.95@gt) != "P_melanocephalus_39985" &
colnames(vcfR.95@gt) != "P_melanocephalus_44844"]
vcfR.95
vcfR.95<-min_mac(vcfR = vcfR.95, min.mac = 1)
#set missing data cutoff for individual samples
vcfR.95<-missing_by_sample(vcfR=vcfR, cutoff = .95)
#subset popmap to only include retained individuals
popmap.95<-popmap[popmap$id %in% colnames(vcfR.95@gt),]
#remove invariant sites generated throughout the filtering process
vcfR.95<-min_mac(vcfR = vcfR.95, min.mac = 1)
#manually drop 4 worst that are still unusable at high missing data cutoffs
vcfR.95@meta
#manually drop 4 worst that are still unusable at high missing data cutoffs
vcfR.95@fix
#set missing data cutoff for individual samples
vcfR.95<-missing_by_sample(vcfR=vcfR, cutoff = .95)
#subset popmap to only include retained individuals
popmap.95<-popmap[popmap$id %in% colnames(vcfR.95@gt),]
#remove invariant sites generated throughout the filtering process
vcfR.95<-min_mac(vcfR = vcfR.95, min.mac = 1)
colnames(vcfR.95@gt) != "P_melanocephalus_44674" &
colnames(vcfR.95@gt) != "P_melanocephalus_44842" &
colnames(vcfR.95@gt) != "P_melanocephalus_39985" &
colnames(vcfR.95@gt) != "P_melanocephalus_44844"
dim(vcfR.95)
colnames(vcfR.95@gt) != "P_melanocephalus_44674" &&
colnames(vcfR.95@gt) != "P_melanocephalus_44842" &&
colnames(vcfR.95@gt) != "P_melanocephalus_39985" &&
colnames(vcfR.95@gt) != "P_melanocephalus_44844"
colnames(vcfR.95@gt) != "P_melanocephalus_44674" &
colnames(vcfR.95@gt) != "P_melanocephalus_44842"
miss.9[order(miss.9$snps.retained),]
colnames(vcfR.95@gt) != "P_melanocephalus_39985"
colnames(vcfR.95@gt) != "P_melanocephalus_44844"
miss<-missing_by_sample(vcfR=vcfR.95, popmap = popmap)
#subset dataframe to show only missing data at .9 completeness cutoff
miss.9<-miss[miss$filt == .9,]
#histogram of samples
hist(miss.9$snps.retained, breaks=50)
#order the samples to figure out which to drop
miss.9[order(miss.9$snps.retained),]
miss<-missing_by_sample(vcfR=vcfR.95, popmap = popmap.95)
#subset dataframe to show only missing data at .9 completeness cutoff
miss.9<-miss[miss$filt == .9,]
#histogram of samples
hist(miss.9$snps.retained, breaks=50)
#order the samples to figure out which to drop
miss.9[order(miss.9$snps.retained),]
vcfR.95 <- vcfR.95[,colnames(vcfR.95@gt) != "P_melanocephalus_39985" &
colnames(vcfR.95@gt) != "P_melanocephalus_44702" &
colnames(vcfR.95@gt) != "P_melanocephalus_44836"]
dim(vcfR.95)
vcfR.95<-min_mac(vcfR = vcfR.95, min.mac = 1)
#subset popmap to only include retained individuals
popmap.95<-popmap[popmap$id %in% colnames(vcfR.95@gt),]
#revisualize missing data by SNP and the effect of various cutoffs on the missingness of each sample
missing_by_snp(vcfR.95)
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
assess_clustering(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9,.95))
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
assess_clustering(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9,.95), iterations = 5000)
#choose cutoff
vcfR.95.95<-missing_by_snp(vcfR.95, cutoff = .95)
vcfR.95.95
vcfR.95.90<-missing_by_snp(vcfR.95, cutoff = .90)
vcfR.95.90
#distance thin
f<-distance_thin(vcfR = 95.90, min.distance = 500)
#distance thin
f<-distance_thin(vcfR = vcfR.95.90, min.distance = 500)
#plot depth per snp and per sample
dp <- extract.gt(vcfR.95.95, element = "DP", as.numeric=TRUE)
heatmap.bp(dp, rlabels = FALSE)
#plot genotype quality per snp and per sample
gq <- extract.gt(vcfR.95.95, element = "GQ", as.numeric=TRUE)
heatmap.bp(gq, rlabels = FALSE)
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
g<-assess_clustering(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9,.95), iterations = 5000)
g
devtools::install_github("DevonDeRaad/SNPfiltR")
library(SNPfiltR)
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
g<-assess_missing_data(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9,.95), iterations = 5000)
devtools::install_github("DevonDeRaad/SNPfiltR")
library(SNPfiltR)
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
g<-assess_missing_data(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9,.95), iterations = 3000)
locs<-read.csv("~/Downloads/grosbeak.sampling.csv")
library(vcfR)
vcfR<-read.vcfR("~/Desktop/grosbeaks/grosbeaks.rad/filtered.vcf.gz")
m3<-read.vcfR("~/Desktop/grosbeaks/m3.vcf")
colnames(m3@gt)
#subset localities to only samples we sequenced successfully
locs<-locs[locs$id %in% colnames(m3@gt)]
locs<-read.csv("~/Downloads/grosbeak.sampling.csv")
#subset localities to only samples we sequenced successfully
locs<-locs[locs$id %in% colnames(m3@gt),]
locs<-read.csv("~/Downloads/grosbeak.sampling.csv")
View(locs)
#subset localities to only samples we sequenced successfully
locs$sample<-gsub(".*_", "",locs$id)
View(locs)
View(locs)
#subset localities to only samples we sequenced successfully
locs$sample<-gsub(".*:", "",locs$id)
View(locs)
ids<-colnames(m3@gt)
ids<-colnames(m3@gt)[-1]
gsub(".*_", "",ids)
ids<-data.frame(samps=colnames(m3@gt)[-1],ids=gsub(".*_", "",ids))
View(ids)
locs<-locs[locs$sample %in% gsub(".*_", "",ids),]
locs<-read.csv("~/Downloads/grosbeak.sampling.csv")
#subset localities to only samples we sequenced successfully
locs$sample<-gsub(".*:", "",locs$id)
View(locs)
class(ids$ids)
ids<-data.frame(samps=colnames(m3@gt)[-1],as.numeric(ids=gsub(".*_", "",ids)))
ids<-data.frame(samps=colnames(m3@gt)[-1],ids=as.numeric(gsub(".*_", "",ids)))
locs$sample<-as.character(locs$sample)
locs<-locs[locs$sample %in% gsub(".*_", "",ids),]
locs<-read.csv("~/Downloads/grosbeak.sampling.csv")
#subset localities to only samples we sequenced successfully
locs$sample<-gsub(".*:", "",locs$id)
locs$sample<-as.character(locs$sample)
View(locs)
View(ids)
ids<-data.frame(samps=colnames(m3@gt)[-1],ids=gsub(".*_", "",ids))
View(ids)
locs<-read.csv("~/Downloads/grosbeak.sampling.csv")
locs$sample<-gsub(".*:", "",locs$id)
View(locs)
ids<-data.frame(samps=colnames(m3@gt)[-1],ids=gsub(".*_", "",ids))
View(ids)
ids<-NULL
locs<-read.csv("~/Downloads/grosbeak.sampling.csv")
locs$sample<-gsub(".*:", "",locs$id)
ids<-data.frame(samps=colnames(m3@gt)[-1],ids=gsub(".*_", "",colnames(m3@gt)[-1]))
View(ids)
locs<-read.csv("~/Downloads/grosbeak.sampling.csv")
#subset localities to only samples we sequenced successfully
locs$sample<-as.character(gsub(".*:", "",locs$id))
View(locs)
locs<-locs[locs$sample %in% gsub(".*_", "",ids),]
locs<-read.csv("~/Downloads/grosbeak.sampling.csv")
locs$sample<-as.character(gsub(".*:", "",locs$id))
ids<-data.frame(samps=colnames(m3@gt)[-1],ids=gsub(".*_", "",colnames(m3@gt)[-1]))
View(ids)
locs<-locs[locs$sample %in% ids$ids,]
View(locs)
View(ids)
View(locs)
z<-merge.data.frame(x=ids, y=locs, by.x=ids, by.y=sample)
View(ids)
View(locs)
z<-merge.data.frame(x=ids, y=locs, by.x=2, by.y=7)
View(z)
View(locs)
View(locs)
View(ids)
write.csv(z, "~/Downloads/grosbeak.sampling.scheme.csv")
ids$ids !%in% locs$sample
ids$ids ! %in% locs$sample
(ids$ids %in% locs$sample)
ids$ids[!(ids$ids %in% locs$sample)]
locs<-read.csv("~/Downloads/grosbeak.sampling.scheme.csv")
View(locs)
locs<-locs[locs$sample %in% colnames(vcfR@gt)[-1]]
locs<-read.csv("~/Downloads/grosbeak.sampling.scheme.csv")
locs<-locs[locs$sample %in% colnames(vcfR@gt)[-1],]
View(locs)
locs<-read.csv("~/Desktop/grosbeaks/grosbeaks.rad/grosbeak.sampling.scheme.csv")
locs<-locs[locs$sample %in% colnames(vcfR@gt)[-1],]
rm(list=ls())
#read vcfR
vcfR<-read.vcfR("~/Desktop/grosbeaks/grosbeaks.rad/filtered.vcf.gz")
#read locs
locs<-read.csv("~/Desktop/grosbeaks/grosbeaks.rad/grosbeak.sampling.scheme.csv")
#retain only retained samples
locs<-locs[locs$sample %in% colnames(vcfR@gt)[-1],]
gen<- vcfR2genlight(vcf)
gen<- vcfR2genlight(vcfR)
#make pca
pca<-glPca(gen, nf=6)
library(adegenet)
pca<-glPca(gen, nf=6)
order(locs$sample = colnames(vcfR@gt)[-1])
order(locs$sample == colnames(vcfR@gt)[-1])
#match order between samples in vcf and locs
locs<-locs[order(locs$sample == colnames(vcfR@gt)[-1])]
#match order between samples in vcf and locs
locs<-locs[order(locs$sample == colnames(vcfR@gt)[-1]),]
View(locs)
#pull pca scores out of df
pca.scores<-as.data.frame(pca$scores)
View(pca.scores)
View(locs)
rownames(pca.scores)
locs$sample
order(locs$sample == rownames(pca.scores)
)
match(locs$sample,colnames(vcfR@gt)[-1])
#match order between samples in vcf and locs
locs<-locs[match(locs$sample,colnames(vcfR@gt)[-1]),]
View(locs)
View(pca.scores)
locs<-read.csv("~/Desktop/grosbeaks/grosbeaks.rad/grosbeak.sampling.scheme.csv")
locs<-locs[locs$sample %in% colnames(vcfR@gt)[-1],]
locs<-locs[match(colnames(vcfR@gt)[-1],locs$sample),]
View(locs)
View(pca.scores)
locs<-read.csv("~/Desktop/grosbeaks/grosbeaks.rad/grosbeak.sampling.scheme.csv")
View(locs)
locs$species<-sub(".*_","",locs$sample)
View(locs)
locs<-read.csv("~/Desktop/grosbeaks/grosbeaks.rad/grosbeak.sampling.scheme.csv")
locs$species<-sub("*_","",locs$sample)
View(locs)
locs<-read.csv("~/Desktop/grosbeaks/grosbeaks.rad/grosbeak.sampling.scheme.csv")
locs$species<-sub("._","",locs$sample)
View(locs)
locs$species<-sub("_.*","",locs$species)
View(locs)
write.csv(locs, "~/Desktop/grosbeaks/grosbeaks.rad/grosbeak.sampling.scheme.csv")
#read locs
locs<-read.csv("~/Desktop/grosbeaks/grosbeaks.rad/grosbeak.sampling.scheme.csv")
View(locs)
#retain only retained samples
locs<-locs[locs$sample %in% colnames(vcfR@gt)[-1],]
#match order between samples in vcf and locs
locs<-locs[match(colnames(vcfR@gt)[-1],locs$sample),]
View(locs)
locs<-read.csv("~/Desktop/grosbeaks/grosbeaks.rad/grosbeak.sampling.scheme.csv")
#locs$species<-sub("._","",locs$sample)
#locs$species<-sub("_.*","",locs$species)
#write.csv(locs, "~/Desktop/grosbeaks/grosbeaks.rad/grosbeak.sampling.scheme.csv")
#retain only retained samples
locs<-locs[locs$sample %in% colnames(vcfR@gt)[-1],]
#match order between samples in vcf and locs
locs<-locs[match(colnames(vcfR@gt)[-1],locs$sample),]
View(locs)
#pull pca scores out of df
pca.scores<-as.data.frame(pca$scores)
#match order
pca.scores$sex<-locs$sex
pca.scores$state<-locs$state
pca.scores$species<-locs$species
#ggplot color by species
ggplot(pca.scores, aes(x=PC1, y=PC2, color=species)) +
geom_point(cex = 4, alpha=.75)+
theme_classic()+
theme(legend.position = "bottom", legend.key.size = unit(0, 'cm'),
legend.title = element_text(size=8), legend.text = element_text(size=6.5))
library(ggplot2)
#ggplot color by species
ggplot(pca.scores, aes(x=PC1, y=PC2, color=species)) +
geom_point(cex = 4, alpha=.75)+
theme_classic()+
theme(legend.position = "bottom", legend.key.size = unit(0, 'cm'),
legend.title = element_text(size=8), legend.text = element_text(size=6.5))
ggplot(pca.scores, aes(x=PC1, y=PC2, color=sex)) +
geom_point(cex = 4, alpha=.75)+
theme_classic()+
theme(legend.position = "bottom", legend.key.size = unit(0, 'cm'),
legend.title = element_text(size=8), legend.text = element_text(size=6.5))
#ggplot color by state
ggplot(pca.scores, aes(x=PC1, y=PC2, color=state)) +
geom_point(cex = 4, alpha=.75)+
theme_classic()+
theme(legend.position = "bottom", legend.key.size = unit(0, 'cm'),
legend.title = element_text(size=8), legend.text = element_text(size=6.5))
#remove loci that aren't biallelic
mat<-mat[nchar(vcfR@fix[,"ALT"]) == 1,]
mat<-extract.gt(vcfR)
miss<-c()
for (i in 1:ncol(mat)){
miss[i]<-sum(is.na(mat[,i]))
}
miss
locs$miss<-miss
locs #elevated number of missing genotypes in toepad samples, as expected
locs #elevated number of missing genotypes in toepad samples, as expected
locs
#remove loci that aren't biallelic
mat<-mat[nchar(vcfR@fix[,"ALT"]) == 1,]
dim(mat)
#identify SNPs that are fixed away from LA
conv.mat<-mat
conv.mat[1:5,1:5]
conv.mat[conv.mat == "0/0"]<-0
conv.mat[conv.mat == "0/1"]<-1
conv.mat[conv.mat == "1/1"]<-2
conv.mat<-as.data.frame(conv.mat)
#convert to numeric
for (i in 1:ncol(conv.mat)){
conv.mat[,i]<-as.numeric(as.character(conv.mat[,i]))
}
#show colnames to verify you're subsetting correctly
colnames(conv.mat)
View(pca.scores)
ggplot(pca.scores, aes(x=PC1, y=PC2, color=state)) +
geom_point(cex = 4, alpha=.75)+
theme_classic()+
theme(legend.position = "bottom", legend.key.size = unit(0, 'cm'),
legend.title = element_text(size=8), legend.text = element_text(size=6.5))
mel.af<-(rowSums(conv.mat[,c(2,7,10,15,24,75,78,88,99,128,142)], na.rm=T)/(rowSums(is.na(conv.mat[,c(2,7,10,15,24,75,78,88,99,128,142)]) == FALSE)))/2
lud.af<-(rowSums(conv.mat[,c(139,122,92,87,50)], na.rm=T)/(rowSums(is.na(conv.mat[,c(139,122,92,87,50)]) == FALSE)))/2
#find fixed SNPs
diff<-abs(mel.af - lud.af)
table(is.na(diff))
table(is.na(diff) == FALSE & diff == 1)
head(vcf@fix[,1][is.na(diff) == FALSE & diff == 1])
#list some fixed SNPs
head(vcfR@fix[,1][is.na(diff) == FALSE & diff == 1])
#how many SNPs are fixed
table(is.na(diff) == FALSE & diff > .8)
#how many SNPs are fixed
table(is.na(diff) == FALSE & diff > .6)
#how many SNPs are fixed
table(is.na(diff) == FALSE & diff == 1)
#list some fixed SNPs
head(vcfR@fix[,1][is.na(diff) == FALSE & diff == 1])
#subsample original matrix to only fixed diff SNPs
gen.mat<-mat[is.na(diff) == FALSE & diff == 1,]
dim(gen.mat)
#subsample matrix converted for AF calcs to only fixed SNPS
conv.mat<-conv.mat[is.na(diff) == FALSE & diff == 1,]
dim(conv.mat)
#write a logical test to convert alleles so that a single number represents one parental ancestry
for (i in 1:nrow(gen.mat)){
#if 1 is the melano allele
if((sum(conv.mat[i,c(2,7,10,15,24,75,78,88,99,128,142)], na.rm=T)/(sum(is.na(conv.mat[i,c(2,7,10,15,24,75,78,88,99,128,142)]) == FALSE)))/2 == 0){
#swap all '0/0' cells with '2/2'
gen.mat[i,][gen.mat[i,] == "0/0"]<-"2/2"
#swap all '1/1' cells with '0/0'
gen.mat[i,][gen.mat[i,] == "1/1"]<-"0/0"
#finally convert all '2/2' cells (originally 0/0) into '1/1'
gen.mat[i,][gen.mat[i,] == "2/2"]<-"1/1"
#no need to touch hets
}
}
#convert R class NAs to the string "NA/NA"
gen.mat[is.na(gen.mat) == TRUE]<-"NA/NA"
#if it worked correctly this should be only missing or '1/1'
table(gen.mat[,7])
table(gen.mat[,2])
table(gen.mat[,10])
locus.info<-data.frame(locus=vcfR@fix[vcfR@fix[,3] %in% rownames(gen.mat),1],
type=rep("C", times=nrow(gen.mat)),
lg=gsub("uce-","",vcf@fix[vcf@fix[,3] %in% rownames(gen.mat),1]),
marker.pos=gsub("SNP_","",rownames(gen.mat)))
locus.info<-data.frame(locus=vcfR@fix[vcfR@fix[,3] %in% rownames(gen.mat),1],
type=rep("C", times=nrow(gen.mat)),
lg=gsub("uce-","",vcfR@fix[vcf@fix[,3] %in% rownames(gen.mat),1]),
marker.pos=gsub("SNP_","",rownames(gen.mat)))
locus.info<-data.frame(locus=vcfR@fix[vcfR@fix[,3] %in% rownames(gen.mat),1],
type=rep("C", times=nrow(gen.mat)),
lg=gsub("uce-","",vcfR@fix[vcfR@fix[,3] %in% rownames(gen.mat),1]),
marker.pos=gsub("SNP_","",rownames(gen.mat)))
locus.info<-data.frame(locus=vcfR@fix[vcfR@fix[,3] %in% rownames(gen.mat),1])
vcfR@fix[vcfR@fix[,3]
,]
vcfR@fix
rownames(gen.mat)
dim(gen.mat)
gsub("_.*","",rownames(gen.mat))
gsub(".*_","",rownames(gen.mat))
locus.info<-data.frame(locus=rownames(gen.mat),
type=rep("C", times=nrow(gen.mat)),
lg=gsub("_.*","",rownames(gen.mat)),
marker.pos=gsub(".*_","",rownames(gen.mat)))
#make linkage group numeric
locus.info$lg<-as.numeric(as.character(locus.info$lg))
locus.info$marker.pos<-as.numeric(as.character(locus.info$marker.pos))
#we now have a gt matrix in proper format for introgress
#convert genotype data into a matrix of allele counts
count.matrix<-prepare.data(admix.gen=gen.mat, loci.data=locus.info,
parental1="1",parental2="0", pop.id=F,
ind.id=F, fixed=T)
library(introgress)
#we now have a gt matrix in proper format for introgress
#convert genotype data into a matrix of allele counts
count.matrix<-prepare.data(admix.gen=gen.mat, loci.data=locus.info,
parental1="1",parental2="0", pop.id=F,
ind.id=F, fixed=T)
#estimate hybrid index values
hi.index.sim<-est.h(introgress.data=count.matrix,loci.data=locus.info,
fixed=T, p1.allele="1", p2.allele="0")
mk.image(introgress.data=count.matrix, loci.data=locus.info,
marker.order=NULL,hi.index=hi.index.sim, ylab.image="Individuals",
xlab.h="Red-crowned ancestry", pdf=F,
col.image=c("red","green","blue"))
#calculate mean heterozygosity
het<-calc.intersp.het(introgress.data=count.matrix)
#make triangle plot colored by locality
plot(x=hi.index.sim$h, y=het, bg=rgb(0,0,0,alpha=0.3), pch=21, cex=2, col=as.factor(locs$species),
xlab="Hybrid Index", ylab="Interspecific heterozygosity",
ylim=c(0,1))
segments(x0 =0, y0 =0, x1 =.5, y1 =1)
segments(x0 =1, y0 =0, x1 =.5, y1 =1)
View(hi.index.sim)
View(count.matrix)
colnames(gen.mat)
View(locs)
hi.index.sim$sample<-locs$sample
hi.index.sim$state<-locs$state
View(hi.index.sim)
hi.index.sim$sex<-locs$sex
#make triangle plot colored by species
plot(x=hi.index.sim$h, y=het, bg=rgb(0,0,0,alpha=0.3), pch=21, cex=2, col=as.factor(locs$state),
xlab="Hybrid Index", ylab="Interspecific heterozygosity",
ylim=c(0,1))
segments(x0 =0, y0 =0, x1 =.5, y1 =1)
segments(x0 =1, y0 =0, x1 =.5, y1 =1)
#make triangle plot colored by species
plot(x=hi.index.sim$h, y=het, bg=rgb(0,0,0,alpha=0.3), pch=21, cex=2, col=as.factor(locs$species),
xlab="Hybrid Index", ylab="Interspecific heterozygosity",
ylim=c(0,1))
segments(x0 =0, y0 =0, x1 =.5, y1 =1)
segments(x0 =1, y0 =0, x1 =.5, y1 =1)
