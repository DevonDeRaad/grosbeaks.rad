library(SNPfiltR)
#read in vcf as vcfR
vcfR <- read.vcfR("~/Desktop/grosbeaks/m3.vcf")
library(vcfR)
#read in vcf as vcfR
vcfR <- read.vcfR("~/Desktop/grosbeaks/m3.vcf")
#generate popmap file. Two column popmap with the same format as stacks, and the columns must be named 'id' and 'pop'
popmap<-data.frame(id=colnames(vcfR@gt)[2:length(colnames(vcfR@gt))],pop=substr(colnames(vcfR@gt)[2:length(colnames(vcfR@gt))], 3,11))
View(popmap)
#generate popmap file. Two column popmap with the same format as stacks, and the columns must be named 'id' and 'pop'
popmap<-data.frame(id=colnames(vcfR@gt)[2:length(colnames(vcfR@gt))],pop=substr(colnames(vcfR@gt)[2:length(colnames(vcfR@gt))], 3,8))
View(popmap)
#hard filter to minimum depth of 5, and minimum genotype quality of 30
vcfR<-hard.filter.vcf(vcfR=vcfR, depth = 5, gq = 30)
#hard filter to minimum depth of 5, and minimum genotype quality of 30
vcfR<-hard_filter(vcfR=vcfR, depth = 5, gq = 30)
#execute allele balance filter
vcfR<-filter.allele.balance(vcfR)
#execute allele balance filter
vcfR<-filter_allele_balance(vcfR)
#visualize and pick appropriate max depth cutoff
max_depth(vcfR)
#filter vcf by the max depth cutoff you chose
vcfR<-max_depth(vcfR, maxdepth = 100)
#check vcfR to see how many SNPs we have left
vcfR
#run function to visualize samples
missing.by.sample(vcfR=vcfR, popmap = popmap)
#run function to visualize samples
missing_by_sample(vcfR=vcfR, popmap = popmap)
dev.off()
#run function to visualize samples
missing_by_sample(vcfR=vcfR, popmap = popmap)
#set missing data cutoff for individual samples
vcfR.95<-missing_by_sample(vcfR=vcfR, cutoff = .95)
popmap.95<-popmap[popmap$id %in% colnames(vcfR.95@gt),]
#visualize missing data by SNP and the effect of various cutoffs on the missingness of each sample
missing_by_snp(vcfR.95)
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
assess_clustering(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9, .95))
#remove invariant sites generated throughout the filtering process
vcfR.95<-min_mac(vcfR = vcfR.95, min.mac = 1)
#visualize missing data by SNP and the effect of various cutoffs on the missingness of each sample
missing_by_snp(vcfR.95)
#visualize missing data by SNP and the effect of various cutoffs on the missingness of each sample
miss<-missing_by_snp(vcfR.95)
View(miss)
#rerun missing by sample to figure out which samples are problematic even at high completeness cutoffs
miss<-missing_by_sample(vcfR=vcfR, popmap = popmap)
View(miss)
miss.9<-miss[miss$filt == .9]
miss.9<-miss[miss$filt == .9,]
View(miss.9)
hist(miss.9$snps.retained)
hist(miss.9$snps.retained, xlim=c(1000,1500))
hist(miss.9$snps.retained, breaks=30)
hist(miss.9$snps.retained, breaks=50)
hist(miss.9$snps.retained, breaks=50)
order(miss.9, miss.9$snps.retained)
order(miss.9$snps.retained)
miss.9[order(miss.9$snps.retained),]
vcfR.95
vcfR.95 <- vcfR.95[,colnames(vcfR@gt) != "P_melanocephalus_44674" &
colnames(vcfR@gt) != "P_melanocephalus_44842" &
colnames(vcfR@gt) != "P_melanocephalus_39985" &
colnames(vcfR@gt) != "P_melanocephalus_44844"]
vcfR.95
colnames(vcfR@gt) != "P_melanocephalus_44674" &
colnames(vcfR@gt) != "P_melanocephalus_44842" &
colnames(vcfR@gt) != "P_melanocephalus_39985" &
colnames(vcfR@gt) != "P_melanocephalus_44844"
colnames(vcfR.95@gt) != "P_melanocephalus_44674" &
colnames(vcfR.95@gt) != "P_melanocephalus_44842" &
colnames(vcfR.95@gt) != "P_melanocephalus_39985" &
colnames(vcfR.95@gt) != "P_melanocephalus_44844"
vcfR.95 <- vcfR.95[,colnames(vcfR.95@gt) != "P_melanocephalus_44674" &
colnames(vcfR.95@gt) != "P_melanocephalus_44842" &
colnames(vcfR.95@gt) != "P_melanocephalus_39985" &
colnames(vcfR.95@gt) != "P_melanocephalus_44844"]
vcfR.95
vcfR.95<-min_mac(vcfR = vcfR.95, min.mac = 1)
#set missing data cutoff for individual samples
vcfR.95<-missing_by_sample(vcfR=vcfR, cutoff = .95)
#subset popmap to only include retained individuals
popmap.95<-popmap[popmap$id %in% colnames(vcfR.95@gt),]
#remove invariant sites generated throughout the filtering process
vcfR.95<-min_mac(vcfR = vcfR.95, min.mac = 1)
#manually drop 4 worst that are still unusable at high missing data cutoffs
vcfR.95@meta
#manually drop 4 worst that are still unusable at high missing data cutoffs
vcfR.95@fix
#set missing data cutoff for individual samples
vcfR.95<-missing_by_sample(vcfR=vcfR, cutoff = .95)
#subset popmap to only include retained individuals
popmap.95<-popmap[popmap$id %in% colnames(vcfR.95@gt),]
#remove invariant sites generated throughout the filtering process
vcfR.95<-min_mac(vcfR = vcfR.95, min.mac = 1)
colnames(vcfR.95@gt) != "P_melanocephalus_44674" &
colnames(vcfR.95@gt) != "P_melanocephalus_44842" &
colnames(vcfR.95@gt) != "P_melanocephalus_39985" &
colnames(vcfR.95@gt) != "P_melanocephalus_44844"
dim(vcfR.95)
colnames(vcfR.95@gt) != "P_melanocephalus_44674" &&
colnames(vcfR.95@gt) != "P_melanocephalus_44842" &&
colnames(vcfR.95@gt) != "P_melanocephalus_39985" &&
colnames(vcfR.95@gt) != "P_melanocephalus_44844"
colnames(vcfR.95@gt) != "P_melanocephalus_44674" &
colnames(vcfR.95@gt) != "P_melanocephalus_44842"
miss.9[order(miss.9$snps.retained),]
colnames(vcfR.95@gt) != "P_melanocephalus_39985"
colnames(vcfR.95@gt) != "P_melanocephalus_44844"
miss<-missing_by_sample(vcfR=vcfR.95, popmap = popmap)
#subset dataframe to show only missing data at .9 completeness cutoff
miss.9<-miss[miss$filt == .9,]
#histogram of samples
hist(miss.9$snps.retained, breaks=50)
#order the samples to figure out which to drop
miss.9[order(miss.9$snps.retained),]
miss<-missing_by_sample(vcfR=vcfR.95, popmap = popmap.95)
#subset dataframe to show only missing data at .9 completeness cutoff
miss.9<-miss[miss$filt == .9,]
#histogram of samples
hist(miss.9$snps.retained, breaks=50)
#order the samples to figure out which to drop
miss.9[order(miss.9$snps.retained),]
vcfR.95 <- vcfR.95[,colnames(vcfR.95@gt) != "P_melanocephalus_39985" &
colnames(vcfR.95@gt) != "P_melanocephalus_44702" &
colnames(vcfR.95@gt) != "P_melanocephalus_44836"]
dim(vcfR.95)
vcfR.95<-min_mac(vcfR = vcfR.95, min.mac = 1)
#subset popmap to only include retained individuals
popmap.95<-popmap[popmap$id %in% colnames(vcfR.95@gt),]
#revisualize missing data by SNP and the effect of various cutoffs on the missingness of each sample
missing_by_snp(vcfR.95)
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
assess_clustering(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9,.95))
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
assess_clustering(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9,.95), iterations = 5000)
#choose cutoff
vcfR.95.95<-missing_by_snp(vcfR.95, cutoff = .95)
vcfR.95.95
vcfR.95.90<-missing_by_snp(vcfR.95, cutoff = .90)
vcfR.95.90
#distance thin
f<-distance_thin(vcfR = 95.90, min.distance = 500)
#distance thin
f<-distance_thin(vcfR = vcfR.95.90, min.distance = 500)
#plot depth per snp and per sample
dp <- extract.gt(vcfR.95.95, element = "DP", as.numeric=TRUE)
heatmap.bp(dp, rlabels = FALSE)
#plot genotype quality per snp and per sample
gq <- extract.gt(vcfR.95.95, element = "GQ", as.numeric=TRUE)
heatmap.bp(gq, rlabels = FALSE)
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
g<-assess_clustering(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9,.95), iterations = 5000)
g
devtools::install_github("DevonDeRaad/SNPfiltR")
library(SNPfiltR)
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
g<-assess_missing_data(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9,.95), iterations = 5000)
devtools::install_github("DevonDeRaad/SNPfiltR")
library(SNPfiltR)
#visualize the effect of a few reasonable potential missing data cutoffs on clustering patterns
g<-assess_missing_data(vcfR=vcfR.95, popmap = popmap.95, thresholds = c(.9,.95), iterations = 3000)
